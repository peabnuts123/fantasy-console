import { readdir, writeFile } from 'fs/promises';
import path from 'path';

/**
 * Generate core module bindings for use by script loader
 * from source code in core project.
 */

/** Path to write generated bindings to */
const OutputPath = 'src/core.g.ts';
/** Root import alias of all modules in the core project */
const ImportAliasRoot = '@fantasy-console/core';

// Load all .ts files in the core project
let modules = (await readdir('../core/src', { recursive: true }))
  .filter((file) =>
    path.extname(file) === '.ts'
  )
  .map((file) => {
    return {
      moduleName: pathToModuleName(file),
      import: pathToImport(file),
    };
  });


let fileContents = `/* *******************
 * AUTO-GENERATED FILE
 * *******************
 * @NOTE This file is automatically generated from the contents of \`${ImportAliasRoot}\`
 * To regenerate this file, run \`npm run build:core.g\`
 *
 * DO NOT EDIT THIS FILE MANUALLY, AS ANY CHANGES TO IT WILL BE OVERWRITTEN.
 */

${modules.map((module) => `import * as ${module.moduleName} from '${module.import}';`).join('\n')}

export interface CoreModuleDefinition {
  name: string;
  module: any;
}

// @NOTE These are all the imports that will be injected into scripts
// defined at runtime
export const CoreModules: CoreModuleDefinition[] = [
  ${modules.map((module) => `
  {
    name: '${module.import}',
    module: ${module.moduleName},
  }`).join(',').trim()}
];
`;

// Write file to disk
await writeFile(OutputPath, fileContents);

console.log(`Successfully wrote ${OutputPath} (${fileContents.length} bytes)`);

/**
 * Turn a path like `world/GameObject.ts` and turn it into a unique
 * variable name like `WorldGameObject`.
 * @param {string} path
 */
function pathToModuleName(path) {
  let pathSegments = path
    // Strip file extension
    .replace(/\.\w+$/, '')
    // Strip any trailing 'index' names
    .replace(/index$/, '')
    // Strip any trailing slashes
    .replace(/\/+$/, '')
    // Split by path segment
    .split('/');

  // @NOTE special case for root module
  if (pathSegments.join('').length === 0) {
    return `Core`;
  }

  // PascalCase
  return pathSegments
    .map((segment) => segment[0].toUpperCase() + segment.slice(1))
    .join('');
}

/**
 * Turn a path like `world/GameObject` and turn it into the name of a
 * module to be imported like `@fantasy-console/core/world/GameObject`
 * @param {string} path
 */
function pathToImport(path) {
  let pathSegments = path
    // Strip file extension
    .replace(/\.\w+$/, '')
    // Strip any trailing 'index' names
    .replace(/index$/, '')
    // Strip any trailing slashes
    .replace(/\/+$/, '');

  // @NOTE special case for root module
  if (pathSegments.length === 0) {
    return ImportAliasRoot;
  }

  return `${ImportAliasRoot}/${pathSegments}`;
}